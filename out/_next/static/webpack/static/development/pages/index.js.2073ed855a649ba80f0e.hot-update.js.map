{"version":3,"file":"static/webpack/static/development/pages/index.js.2073ed855a649ba80f0e.hot-update.js","sources":["webpack:///./components/BackgroundAnimation.js"],"sourcesContent":["import styled from 'styled-components';\nimport * as THREE from 'three';\n// import OrbitControls from 'three-orbitcontrols';\n\nconst Outer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 10;\n`;\n\nconst colors = {\n  cube: new THREE.Color(0x15cda8),\n  sphere: new THREE.Color(0x240041),\n  prism: new THREE.Color(0xe41749),\n  sky: new THREE.Color(0x23b3f0),\n  ambient: new THREE.Color(0xffffff),\n  spotlight: new THREE.Color(0xffffff),\n  directional: {\n    left: new THREE.Color(0xff0000),\n    right: new THREE.Color(0x0000ff),\n  },\n  background: new THREE.Color(0xf5f7fa),\n};\n\nclass BackgroundAnimation extends React.Component {\n  state = {\n    activeScreen: this.props.activeScreen,\n  };\n\n  componentDidMount() {\n    this.startAnimation();\n  }\n\n  componentWillReceiveProps({ activeScreen }) {\n    if (this.props.activeScreen !== activeScreen) {\n      this.setState({ activeScreen });\n    }\n  }\n\n  startAnimation = () => {\n    // Initializing Three.js Scene\n    const scene = new THREE.Scene();\n\n    // Setting Camera\n    const dislayRatio = window.innerWidth / window.innerHeight;\n    const camera = new THREE.PerspectiveCamera(75, dislayRatio, 0.1, 50);\n    camera.position.y = 6;\n    camera.position.z = 24;\n\n    // Setting Renderer\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    // Set background color\n    renderer.setClearColor(colors.background, 1);\n\n    // Adding ,renderer to Canvas\n    this.canvas.appendChild(renderer.domElement);\n\n    // Ambient Light\n    const ambient = new THREE.AmbientLight(colors.ambient, 0.5);\n    scene.add(ambient);\n\n    // Directional Light - Left\n    const directLightLeft = new THREE.DirectionalLight(colors.directional.left, 0.5);\n    directLightLeft.position.set(-20, 40, 0);\n    scene.add(directLightLeft);\n\n    // Directional Light - Right\n    const directLightRight = new THREE.DirectionalLight(colors.directional.right, 0.5);\n    directLightRight.position.set(20, 40, 0);\n    scene.add(directLightRight);\n\n    // Spotlight\n    const spotlight = new THREE.SpotLight(colors.spotlight, 0.5);\n    spotlight.position.set(0, 50, 0);\n    spotlight.castShadow = true;\n    scene.add(spotlight);\n\n    // Earth\n    const earthGeometry = new THREE.PlaneGeometry(2000, 2000);\n    const earthMaterial = new THREE.ShadowMaterial();\n    earthMaterial.opacity = 0.05;\n    const earth = new THREE.Mesh(earthGeometry, earthMaterial);\n    earth.position.set(0, 0, 0);\n    earth.rotation.x = -Math.PI * 0.5;\n    earth.receiveShadow = true;\n    scene.add(earth);\n\n    // Sky\n    const sky = earth.clone();\n    sky.position.set(0, 50, 0);\n    sky.material = new THREE.MeshBasicMaterial({\n      color: colors.sky,\n      side: THREE.DoubleSide,\n    });\n    scene.add(sky);\n\n    // Cube\n    const cubeGeometry = new THREE.BoxGeometry(5, 5, 5);\n    const cubeMaterial = new THREE.MeshPhongMaterial({\n      color: colors.cube,\n    });\n\n    const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n    cube.position.x = -10;\n    cube.position.y = 6.5;\n    cube.rotation.y = Math.PI / 4;\n    cube.castShadow = true;\n    scene.add(cube);\n\n    // Sphere\n    const sphereGeometry = new THREE.SphereBufferGeometry(3, 24, 24);\n    const sphereMaterial = new THREE.MeshPhongMaterial({\n      color: colors.sphere,\n    });\n\n    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n    sphere.position.y = 6.5;\n    sphere.castShadow = true;\n    scene.add(sphere);\n\n    // Prism\n    const prismGeometry = new THREE.ConeBufferGeometry(4, 5, 6);\n    const prismMaterial = new THREE.MeshPhongMaterial({\n      color: colors.prism,\n    });\n\n    const prism = new THREE.Mesh(prismGeometry, prismMaterial);\n    prism.position.x = 10;\n    prism.position.y = 6.5;\n    prism.castShadow = true;\n    scene.add(prism);\n\n    // Orbit Controls\n    // const controls = new OrbitControls(camera, this.canvas);\n\n    const renderCanvas = () => {\n      const { activeScreen } = this.state;\n      requestAnimationFrame(renderCanvas);\n\n      cube.rotation.y += 0.01;\n      sphere.rotation.y += 0.01;\n      prism.rotation.y += 0.01;\n\n      switch (activeScreen) {\n        case 'about':\n          if (cube.position.z < 21) {\n            cube.position.x += 0.36;\n            cube.position.z += 0.75;\n            cube.rotation.x -= 0.15;\n            cube.rotation.z += 0.1;\n          } else {\n            cube.rotation.x = 0;\n            cube.rotation.y = 0;\n            cube.rotation.z = 0;\n          }\n          break;\n        case 'portfolio':\n          if (sphere.position.z < 21) {\n            sphere.position.y -= 0.05;\n            sphere.position.z += 0.75;\n            sphere.rotation.x -= 0.15;\n            sphere.rotation.z += 0.1;\n          } else {\n            sphere.rotation.x = 0;\n            sphere.rotation.y = 0;\n            sphere.rotation.z = 0;\n          }\n          break;\n        case 'contact':\n          if (prism.position.z < 21) {\n            prism.position.x -= 0.35;\n            prism.position.y -= 0.04;\n            prism.position.z += 0.75;\n            prism.rotation.x -= 0.05;\n          } else {\n            prism.rotation.x += 0;\n            prism.rotation.y = 0;\n          }\n          break;\n        case 'cv':\n          if (camera.rotation.x < Math.PI / 2) {\n            camera.rotation.x += 0.05;\n          }\n          break;\n        default:\n          if (cube.position.z > 0) {\n            cube.position.x -= 0.48;\n            cube.position.z -= 1;\n          }\n          if (sphere.position.z > 0) {\n            sphere.position.y += 0.06666666;\n            sphere.position.z -= 1;\n          }\n          if (prism.position.z > 0) {\n            prism.position.x += 0.46666666;\n            prism.position.y += 0.05333333;\n            prism.position.z -= 1;\n            prism.rotation.x += 0.06666666;\n          }\n          if (camera.rotation.x > 0) {\n            camera.rotation.x -= 0.1;\n          }\n          break;\n      }\n\n      renderer.render(scene, camera);\n    };\n\n    renderCanvas();\n\n    // Event Listener for Resize\n    window.addEventListener(\n      'resize',\n      () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      },\n      false,\n    );\n  };\n\n  render() {\n    return (\n      <Outer\n        ref={(n) => {\n          this.canvas = n;\n        }}\n      />\n    );\n  }\n}\n\nexport default BackgroundAnimation;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAXA;AACA;AAaA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AA3DA;AACA;AA6DA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;;;;;;AAtMA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;AA+LA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AApNA;AACA;AAsNA;;;;A","sourceRoot":""}